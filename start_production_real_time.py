#!/usr/bin/env python
"""
PRODUCTION REAL-TIME SYSTEM STARTUP
This script starts all necessary services for real-time investment tracking
"""
import os
import sys
import django
import subprocess
import time
import logging
from datetime import datetime

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'delivery_tracker.settings')
django.setup()

from investments.models import InvestmentItem, RealTimePriceFeed
from investments.price_services import price_service
from investments.tasks import update_real_time_prices

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def update_all_prices_now():
    """Update all prices immediately"""
    print("üîÑ Updating all prices with real market data...")
    
    try:
        # Update price feeds
        updated_count = price_service.update_all_prices()
        print(f"‚úÖ Updated {updated_count} price feeds")
        
        # Update investment items
        items = InvestmentItem.objects.filter(is_active=True)
        updated_items = 0
        
        for item in items:
            if item.symbol:
                feed = RealTimePriceFeed.objects.filter(symbol=item.symbol, is_active=True).first()
                if feed:
                    item.current_price_usd = feed.current_price
                    item.price_change_24h = feed.price_change_24h
                    item.price_change_percentage_24h = feed.price_change_percentage_24h
                    item.last_price_update = timezone.now()
                    item.save()
                    updated_items += 1
        
        print(f"‚úÖ Updated {updated_items} investment items with real market prices")
        return True
        
    except Exception as e:
        logger.error(f"Error updating prices: {e}")
        return False

def start_celery_worker():
    """Start Celery worker for background tasks"""
    print("üîÑ Starting Celery worker...")
    
    try:
        # Start Celery worker in background
        cmd = ['celery', '-A', 'delivery_tracker', 'worker', '--loglevel=info']
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("‚úÖ Celery worker started")
        return process
    except Exception as e:
        logger.error(f"Error starting Celery worker: {e}")
        return None

def start_celery_beat():
    """Start Celery beat for scheduled tasks"""
    print("üîÑ Starting Celery beat...")
    
    try:
        # Start Celery beat in background
        cmd = ['celery', '-A', 'delivery_tracker', 'beat', '--loglevel=info']
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("‚úÖ Celery beat started")
        return process
    except Exception as e:
        logger.error(f"Error starting Celery beat: {e}")
        return None

def start_django_server():
    """Start Django development server"""
    print("üîÑ Starting Django server...")
    
    try:
        # Start Django server
        cmd = ['python', 'manage.py', 'runserver', '0.0.0.0:8000']
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("‚úÖ Django server started on http://localhost:8000")
        return process
    except Exception as e:
        logger.error(f"Error starting Django server: {e}")
        return None

def main():
    """Main startup function"""
    print("üöÄ STARTING PRODUCTION REAL-TIME SYSTEM")
    print("=" * 50)
    
    # Update prices immediately
    if update_all_prices_now():
        print("‚úÖ Prices updated successfully")
    else:
        print("‚ùå Failed to update prices")
    
    # Start services
    print("\nüîÑ Starting all services...")
    
    # Start Django server
    django_process = start_django_server()
    time.sleep(2)
    
    # Start Celery worker
    celery_worker = start_celery_worker()
    time.sleep(2)
    
    # Start Celery beat
    celery_beat = start_celery_beat()
    time.sleep(2)
    
    print("\nüéâ PRODUCTION REAL-TIME SYSTEM STARTED!")
    print("=" * 50)
    print("‚úÖ Django Server: http://localhost:8000")
    print("‚úÖ Investment Marketplace: http://localhost:8000/investments/")
    print("‚úÖ Live Dashboard: http://localhost:8000/investments/live-dashboard/")
    print("‚úÖ Enhanced Dashboard: http://localhost:8000/investments/enhanced-dashboard/")
    print("‚úÖ Celery Worker: Running")
    print("‚úÖ Celery Beat: Running")
    print("‚úÖ Real-time Updates: Active")
    print("=" * 50)
    print("\nüìä SYSTEM FEATURES:")
    print("‚Ä¢ Real-time price updates every 60 seconds")
    print("‚Ä¢ Live WebSocket connections")
    print("‚Ä¢ Price movement tracking and counting")
    print("‚Ä¢ Live charts and analytics")
    print("‚Ä¢ Featured items with real market prices")
    print("‚Ä¢ Portfolio valuation updates")
    print("\nüî¥ The system is now LIVE with real market data!")
    
    try:
        # Keep the script running
        while True:
            time.sleep(60)
            print(f"‚è∞ System running... {datetime.now().strftime('%H:%M:%S')}")
    except KeyboardInterrupt:
        print("\nüõë Shutting down services...")
        if django_process:
            django_process.terminate()
        if celery_worker:
            celery_worker.terminate()
        if celery_beat:
            celery_beat.terminate()
        print("‚úÖ All services stopped")

if __name__ == "__main__":
    main()
